#!/usr/bin/env node

const { build } = require("electron-builder")
const path = require("path")
const fs = require("fs")

console.log("üöÄ PROVANYA POS Build Ba≈ülatƒ±lƒ±yor...")

const buildConfig = {
  config: path.join(__dirname, "..", "electron-builder.json"),
  publish: "never",
  win: ["nsis:x64"],
  x64: true,
}

function preBuildChecks() {
  console.log("üîç Pre-build kontrolleri yapƒ±lƒ±yor...")

  const distDir = path.join(__dirname, "..", "dist")
  if (fs.existsSync(distDir)) {
    console.log("üßπ Eski build dosyalarƒ± temizleniyor...")
    fs.rmSync(distDir, { recursive: true, force: true })
  }

  const requiredFiles = ["package.json", "src/main.js", "src/preload.js", "src/renderer/index.html"]

  for (const file of requiredFiles) {
    const filePath = path.join(__dirname, "..", file)
    if (!fs.existsSync(filePath)) {
      console.error(`‚ùå Gerekli dosya bulunamadƒ±: ${file}`)
      process.exit(1)
    }
  }

  console.log("‚úÖ Pre-build kontrolleri tamamlandƒ±")
}

function postBuildActions() {
  console.log("üéØ Post-build i≈ülemleri yapƒ±lƒ±yor...")

  const distDir = path.join(__dirname, "..", "dist")
  if (fs.existsSync(distDir)) {
    const files = fs.readdirSync(distDir)
    console.log("üì¶ Olu≈üturulan dosyalar:")
    files.forEach((file) => {
      const filePath = path.join(distDir, file)
      const stats = fs.statSync(filePath)
      const size = (stats.size / 1024 / 1024).toFixed(2)
      console.log(`   üìÑ ${file} (${size} MB)`)
    })
  }

  console.log("‚úÖ Windows EXE installer ba≈üarƒ±yla olu≈üturuldu!")
}

async function runBuild() {
  try {
    preBuildChecks()
    console.log("üî® Windows x64 platformu i√ßin build ba≈ülatƒ±lƒ±yor...")

    await build(buildConfig)

    postBuildActions()
  } catch (error) {
    console.error("‚ùå Build hatasƒ±:", error.message)
    process.exit(1)
  }
}

process.on("SIGINT", () => {
  console.log("\n‚ö†Ô∏è  Build i≈ülemi iptal edildi")
  process.exit(0)
})

runBuild()
